OPENCL_1.0 {
global:
    clBuildProgram;
    clCreateBuffer;
    clCreateCommandQueue;
    clCreateContext;
    clCreateContextFromType;
    clCreateFromD3D10Buffer;
    clCreateFromGLBuffer;
    clCreateFromGLRenderbuffer;
    clCreateFromGLTexture2D;
    clCreateFromGLTexture3D;
    clCreateImage2D;
    clCreateImage3D;
    clCreateImageFromD3D10Resource;
    clCreateKernel;
    clCreateKernelsInProgram;
    clCreateProgramWithBinary;
    clCreateProgramWithSource;
    clCreateSampler;
    clEnqueueAcquireExternalObjects;
    clEnqueueAcquireGLObjects;
    clEnqueueBarrier;
    clEnqueueCopyBuffer;
    clEnqueueCopyBufferToImage;
    clEnqueueCopyImage;
    clEnqueueCopyImageToBuffer;
    clEnqueueMapBuffer;
    clEnqueueMapImage;
    clEnqueueMarker;
    clEnqueueNDRangeKernel;
    clEnqueueNativeKernel;
    clEnqueueReadBuffer;
    clEnqueueReadImage;
    clEnqueueReleaseExternalObjects;
    clEnqueueReleaseGLObjects;
    clEnqueueTask;
    clEnqueueUnmapMemObject;
    clEnqueueWaitForEvents;
    clEnqueueWriteBuffer;
    clEnqueueWriteImage;
    clFinish;
    clFlush;
    clGetCommandQueueInfo;
    clGetContextInfo;
    clGetDeviceIDs;
    clGetDeviceInfo;
    clGetEventInfo;
    clGetEventProfilingInfo;
    clGetExtensionFunctionAddress;
    clGetGLObjectInfo;
    clGetGLTextureInfo;
    clGetImageInfo;
    clGetKernelInfo;
    clGetKernelWorkGroupInfo;
    clGetMemObjectInfo;
    clGetPlatformIDs;
    clGetPlatformInfo;
    clGetProgramBuildInfo;
    clGetProgramInfo;
    clGetSamplerInfo;
    clGetSupportedImageFormats;
    clReleaseCommandQueue;
    clReleaseContext;
    clReleaseEvent;
    clReleaseKernel;
    clReleaseMemObject;
    clReleaseProgram;
    clReleaseSampler;
    clRetainCommandQueue;
    clRetainContext;
    clRetainEvent;
    clRetainKernel;
    clRetainMemObject;
    clRetainProgram;
    clRetainSampler;
    clSetCommandQueueProperty;
    clSetKernelArg;
    clUnloadCompiler;
    clWaitForEvents;
    clIcdGetPlatformIDsKHR;
#if defined(OPENCL_MAINLINE)
local:
    *;
#endif
};

#if (OPENCL_MAJOR > 1) || (OPENCL_MAJOR == 1 && OPENCL_MINOR >= 1)
OPENCL_1.1 {
global:
    clCreateUserEvent;
    clSetUserEventStatus;
    clSetEventCallback;
    clSetMemObjectDestructorCallback;
    clCreateSubBuffer;
    clEnqueueReadBufferRect;
    clEnqueueWriteBufferRect;
    clEnqueueCopyBufferRect;

    aclGetTargetInfo;
    aclCompilerInit;
    aclCompilerFini;
    aclReadFromMem;
    aclReadFromFile;
    aclBinaryInit;
    aclBinaryFini;
    aclWriteToMem;
    aclInsertSection;
    aclExtractSection;
    aclRemoveSection;
    aclQueryInfo;
    aclDbgAddArgument;
    aclExtractSymbol;
    aclInsertSymbol;
    aclRemoveSymbol;
    aclCompile;
    aclDisassemble;
} OPENCL_1.0;
#endif

#if (OPENCL_MAJOR > 1) || (OPENCL_MAJOR == 1 && OPENCL_MINOR >= 2)
OPENCL_1.2 {
global:
    clCompileProgram;
    clCreateFromGLTexture;
    clCreateImage;
    clCreateProgramWithBuiltInKernels;
    clCreateSubDevices;
    clEnqueueBarrierWithWaitList;
    clEnqueueFillBuffer;
    clEnqueueFillImage;
    clEnqueueMarkerWithWaitList;
    clEnqueueMigrateMemObjects;
    clGetExtensionFunctionAddressForPlatform;
    clGetKernelArgInfo;
    clLinkProgram;
    clReleaseDevice;
    clRetainDevice;
    clUnloadPlatformCompiler;
} OPENCL_1.1;
#endif

#if (OPENCL_MAJOR >= 2)
OPENCL_2.0 {
global:
    clCreateCommandQueueWithProperties;
    clCreateSamplerWithProperties;
    clCreatePipe;
    clGetPipeInfo;
    clSVMAlloc;
    clSVMFree;
    clSetKernelArgSVMPointer;
    clSetKernelExecInfo;
    clEnqueueSVMFree;
    clEnqueueSVMMemcpy;
    clEnqueueSVMMemFill;
    clEnqueueSVMMap;
    clEnqueueSVMUnmap;
} OPENCL_1.2;
#endif

ACL_0.8 {
global:
    oclCompilerInit;
    oclCompilerFini;
    oclCompilerVersion;
    oclVersionSize;
    oclCompileSource;
    oclCompileSourceToIR;
    oclCompileIRToIL;
    oclCompileILToISA;
    oclCompileBinary;
    oclGetCompilerLog;
    oclGetArchInfo;
    oclGetDeviceInfo;
    oclGetTargetInfo;
    oclGetArchitecture;
    oclGetFamily;
    oclGetChip;
    readOclElfFromFile;
    readOclElfFromMem;
    writeOclElfToFile;
    writeOclElfToMem;
    createElfFromElf;
    getBIFVersion;
    constructOclElf;
    destructOclElf;
    elfInsertSection;
    elfExtractSection;
    elfInsertSymbol;
    elfExtractSymbol;
    oclirSetType;
    oclirRetrieveType;
    oclirLink;
    oclhsaCompileSource;
    oclhsaCompileBinary;
    oclhsaSetType;
    oclhsaRetrieveType;
    oclhsaConvertType;
    oclilCompileSource;
    oclilCompileBinary;
    oclilSetType;
    oclilRetrieveType;
    oclilConvertType;
    oclisaDisassemble;
    oclisaGetBinaryBlob;
    rtGetInfo;
    aclCompilerInit;
    aclCompilerFini;
    aclCompilerVersion;
    aclVersionSize;
    aclGetErrorString;
    aclGetArchInfo;
    aclGetDeviceInfo;
    aclGetTargetInfo;
    aclGetArchitecture;
    aclGetFamily;
    aclGetChip;
    aclBinaryInit;
    aclBinaryFini;
    aclReadFromFile;
    aclReadFromMem;
    aclWriteToFile;
    aclWriteToMem;
    aclCreateFromBinary;
    aclBinaryVersion;
    aclInsertSection;
    aclRemoveSection;
    aclExtractSection;
    aclInsertSymbol;
    aclRemoveSymbol;
    aclExtractSymbol;
    aclDbgAddArgument;
    aclDbgRemoveArgument;
    aclQueryInfo;
    aclCompile;
    aclLink;
    aclGetCompilerLog;
    aclRetrieveType;
    aclSetType;
    aclConvertType;
    aclDisassemble;
    aclGetDeviceBinary;
    aclDumpBinary;
};
